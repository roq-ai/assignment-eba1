generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model activity_log {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  timestamp  DateTime @db.Timestamp(6)
  user_id    String?  @db.Uuid
  action     String   @db.VarChar(255)
  resource   String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model episode {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  season_id      String?  @db.Uuid
  episode_number Int
  title          String   @db.VarChar(255)
  duration       Int
  user_id        String?  @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  season         season?  @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model movie {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @db.VarChar(255)
  genre        String   @db.VarChar(255)
  release_year Int
  director     String   @db.VarChar(255)
  duration     Int
  description  String   @db.VarChar(255)
  user_id      String?  @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model season {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  series_id     String?   @db.Uuid
  season_number Int
  user_id       String?   @db.Uuid
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  episode       episode[]
  series        series?   @relation(fields: [series_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model series {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @db.VarChar(255)
  genre        String   @db.VarChar(255)
  release_year Int
  director     String   @db.VarChar(255)
  description  String   @db.VarChar(255)
  user_id      String?  @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  season       season[]
  user         user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  activity_log activity_log[]
  episode      episode[]
  movie        movie[]
  organization organization[]
  season       season[]
  series       series[]
}
